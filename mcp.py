#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script principal pour MCP_AI_Monitor.
Permet de lancer les diff√©rents modules du syst√®me.
"""

import os
import sys
import argparse
import subprocess
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
from datetime import datetime
from colorama import init, Fore, Style, Back
from discord_webhook import DiscordWebhook, DiscordEmbed
import socket
import platform
import psutil
import time
import json

# Initialiser colorama
init(autoreset=True)

# Configuration des webhooks Discord par cat√©gorie
# Webhook pour les rapports syst√®me (infos g√©n√©rales, CPU/RAM, processus)
DISCORD_HARDWARE_WEBHOOK_URL = "https://discord.com/api/webhooks/1362970830145060935/8Nah3zbLG14ciJPLGQL_fdyn4u8UA0GAgt1C9cpuL_LbaiLjt4TZccjso6AXnPLvXyj3"

# Webhook pour les rapports r√©seau (infos r√©seau, connexions, interfaces)
DISCORD_NETWORK_WEBHOOK_URL = "https://discord.com/api/webhooks/1362971345369170092/h9KNZNbiEsBKzqFa4ExDoK_qNMfrUNkXBWNuz2jyYS9ide72qLzNrBJk7f6bbHyy_SvU"

# Webhook g√©n√©ral (conserv√© pour compatibilit√©)
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1362961722029117510/kxWuQpy-lPbaGbX4-nk3_2eEMRamP50kckEmrCxBEBXtq5EMy006C0iW8IpxtX51yExs"

def print_banner():
    """Affiche la banni√®re MCP."""
    banner = r"""
    __  _______________        ___    ____    __  ___            _ __            
   /  |/  / ____/ ____/       /   |  /  _/   /  |/  /___  ____  (_) /_____  _____
  / /|_/ / /   / __/ ______  / /| |  / /    / /|_/ / __ \/ __ \/ / __/ __ \/ ___/
 / /  / / /___/ /___/_____/ / ___ |_/ /    / /  / / /_/ / / / / / /_/ /_/ / /    
/_/  /_/\____/_____/       /_/  |_/___/   /_/  /_/\____/_/ /_/_/\__/\____/_/     
                                                                                                                                                   
    """
    print(f"{Fore.CYAN}{banner}")
    print(f"{Fore.GREEN}MCP_AI_Monitor - Master Control Program")
    print(f"{Fore.GREEN}Surveillance syst√®me avec d√©tection d'anomalies par IA")
    print(f"{Fore.YELLOW}{'='*70}")

def check_dependencies():
    """V√©rifie si les d√©pendances sont install√©es."""
    try:
        import psutil
        import pandas
        import sklearn
        import joblib
        import plyer
        import matplotlib
        import colorama
        import discord_webhook
        return True
    except ImportError as e:
        print(f"{Fore.RED}Erreur: D√©pendance manquante - {str(e)}")
        print(f"{Fore.YELLOW}Installez les d√©pendances avec: pip install -r requirements.txt")
        return False

def run_module(module_name):
    """Ex√©cute un module Python sp√©cifique."""
    try:
        subprocess.run([sys.executable, f"{module_name}.py"])
    except Exception as e:
        print(f"{Fore.RED}Erreur lors de l'ex√©cution de {module_name}.py: {str(e)}")

def get_system_info():
    """R√©cup√®re les informations syst√®me pour les inclure dans les rapports."""
    hostname = socket.gethostname()
    system_info = {
        "hostname": hostname,
        "os": platform.system() + " " + platform.release(),
        "platform": platform.platform(),
        "processor": platform.processor(),
        "python_version": platform.python_version(),
        "cpu_cores": psutil.cpu_count(logical=True),
        "physical_cores": psutil.cpu_count(logical=False),
        "ram_total": round(psutil.virtual_memory().total / (1024**3), 2)  # En Go
    }
    return system_info

def get_network_info():
    """R√©cup√®re les informations r√©seau."""
    net_io_start = psutil.net_io_counters()
    time.sleep(1)  # Attendre 1 seconde pour calculer la vitesse
    net_io_end = psutil.net_io_counters()
    
    # Calculer les d√©bits
    bytes_sent = net_io_end.bytes_sent - net_io_start.bytes_sent
    bytes_recv = net_io_end.bytes_recv - net_io_start.bytes_recv
    
    # Convertir en KB/s
    kb_sent = bytes_sent / 1024
    kb_recv = bytes_recv / 1024
    
    # R√©cup√©rer les informations des interfaces r√©seau
    net_if_addrs = psutil.net_if_addrs()
    interfaces = []
    
    for interface_name, addresses in net_if_addrs.items():
        for addr in addresses:
            if addr.family == socket.AF_INET:  # IPv4
                interfaces.append({
                    "name": interface_name,
                    "ip": addr.address,
                    "netmask": addr.netmask
                })
    
    # R√©cup√©rer les connexions r√©seau actives
    connections = []
    for conn in psutil.net_connections(kind='inet'):
        if conn.status == 'ESTABLISHED':
            connections.append({
                "local_addr": f"{conn.laddr.ip}:{conn.laddr.port}",
                "remote_addr": f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else "N/A",
                "status": conn.status,
                "pid": conn.pid
            })
    
    # Limiter le nombre de connexions pour √©viter des rapports trop longs
    connections = connections[:10]
    
    return {
        "upload_speed": kb_sent,
        "download_speed": kb_recv,
        "total_sent": net_io_end.bytes_sent / (1024**3),  # En GB
        "total_recv": net_io_end.bytes_recv / (1024**3),  # En GB
        "interfaces": interfaces,
        "connections": connections[:5]  # Limiter √† 5 connexions
    }

def get_top_processes(n=5):
    """R√©cup√®re les processus qui consomment le plus de ressources."""
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            pinfo = proc.info
            processes.append(pinfo)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    # Trier par utilisation CPU puis RAM
    processes.sort(key=lambda x: (x['cpu_percent'], x['memory_percent']), reverse=True)
    
    return processes[:n]

def send_discord_report(report_file, stats_data):
    """Envoie le rapport √† Discord via webhook avec plusieurs embeds th√©matiques."""
    try:
        print(f"{Fore.CYAN}Envoi du rapport sur Discord...")
        
        # R√©cup√©rer les informations syst√®me
        sys_info = get_system_info()
        
        # R√©cup√©rer les informations r√©seau
        net_info = get_network_info()
        
        # R√©cup√©rer les processus les plus gourmands
        top_procs = get_top_processes(5)
        
        # --------------------- RAPPORT HARDWARE ---------------------
        # Webhook pour les rapports hardware (info syst√®me, CPU/RAM, processus)
        hardware_webhook = DiscordWebhook(url=DISCORD_HARDWARE_WEBHOOK_URL, 
                                  username="MCP Rapport Hardware")
        
        # Fichier graphique √† envoyer
        with open(report_file, "rb") as f:
            hardware_webhook.add_file(file=f.read(), filename=os.path.basename(report_file))
        
        # --------- EMBED 1: INFORMATIONS G√âN√âRALES ---------
        embed_info = DiscordEmbed(
            title=f"üìä Rapport MCP AI Monitor - {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            description=f"Rapport complet de surveillance syst√®me g√©n√©r√© par MCP AI Monitor.",
            color=0x00ffff  # Cyan
        )
        
        # Ajouter les informations syst√®me
        embed_info.add_embed_field(
            name="üìã Informations Syst√®me",
            value=f"**Machine:** {sys_info['hostname']}\n"
                 f"**OS:** {sys_info['os']}\n"
                 f"**CPU:** {sys_info['processor']}\n"
                 f"**C≈ìurs:** {sys_info['physical_cores']} physiques / {sys_info['cpu_cores']} logiques\n"
                 f"**RAM:** {sys_info['ram_total']} Go"
        )
        
        # Ajouter le timestamp et le footer
        embed_info.set_timestamp()
        embed_info.set_footer(text="MCP AI Monitor | Vue d'ensemble")
        
        # --------- EMBED 2: GRAPHIQUE D'UTILISATION ---------
        embed_graph = DiscordEmbed(
            title=f"üìà Graphique d'Utilisation CPU/RAM",
            color=0x2ecc71  # Vert
        )
        
        # Ajouter l'image du graphique
        embed_graph.set_image(url=f"attachment://{os.path.basename(report_file)}")
        
        # Ajouter les statistiques principales
        embed_graph.add_embed_field(
            name="üìä Statistiques d'Utilisation",
            value=f"**CPU Moyen:** {stats_data['cpu_percent']['mean']:.2f}%\n"
                 f"**CPU Max:** {stats_data['cpu_percent']['max']:.2f}%\n"
                 f"**RAM Moyenne:** {stats_data['ram_percent']['mean']:.2f}%\n"
                 f"**RAM Max:** {stats_data['ram_percent']['max']:.2f}%\n"
                 f"**√âchantillons:** {stats_data['count']}"
        )
        
        embed_graph.set_footer(text="MCP AI Monitor | Graphiques et statistiques")
        
        # --------- EMBED 3: PROCESSUS ---------
        embed_processes = DiscordEmbed(
            title=f"üîÑ Processus les Plus Gourmands",
            description=f"Liste des processus consommant le plus de ressources syst√®me",
            color=0xe74c3c  # Rouge
        )
        
        # Tableau format√© des processus
        processes_info = ""
        for i, proc in enumerate(top_procs):
            processes_info += f"**{i+1}.** `{proc['name']}` (PID: {proc['pid']})\n"
            processes_info += f"   ‚îî‚îÄ CPU: {proc['cpu_percent']:.1f}%, RAM: {proc['memory_percent']:.1f}%\n"
        
        embed_processes.description = processes_info if processes_info else "Aucun processus actif d√©tect√©."
        embed_processes.set_footer(text="MCP AI Monitor | Processus actifs")
        
        # Ajouter les embeds au webhook hardware
        hardware_webhook.add_embed(embed_info)
        hardware_webhook.add_embed(embed_graph)
        hardware_webhook.add_embed(embed_processes)
        
        # Envoyer le webhook hardware
        hardware_response = hardware_webhook.execute()
        
        # --------------------- RAPPORT R√âSEAU ---------------------
        # Webhook pour les rapports r√©seau
        network_webhook = DiscordWebhook(url=DISCORD_NETWORK_WEBHOOK_URL, 
                                 username="MCP Network AI")
        
        # --------- EMBED 4: R√âSEAU ---------
        embed_network = DiscordEmbed(
            title=f"üåê Informations R√©seau",
            description=f"Rapport r√©seau pour **{sys_info['hostname']}** g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            color=0x3498db  # Bleu
        )
        
        # Activit√© r√©seau
        embed_network.add_embed_field(
            name="üì∂ Activit√© R√©seau",
            value=f"**D√©bit montant:** {net_info['upload_speed']:.2f} KB/s\n"
                 f"**D√©bit descendant:** {net_info['download_speed']:.2f} KB/s\n"
                 f"**Total envoy√©:** {net_info['total_sent']:.2f} GB\n"
                 f"**Total re√ßu:** {net_info['total_recv']:.2f} GB",
            inline=True
        )
        
        # Interfaces r√©seau
        interfaces_info = ""
        for interface in net_info['interfaces'][:3]:  # Limiter √† 3 interfaces pour la lisibilit√©
            interfaces_info += f"**{interface['name']}:** {interface['ip']}\n"
        
        embed_network.add_embed_field(
            name="üñß Interfaces R√©seau",
            value=interfaces_info if interfaces_info else "Aucune interface r√©seau active.",
            inline=True
        )
        
        embed_network.set_timestamp()
        embed_network.set_footer(text="MCP AI Monitor | Informations r√©seau")
        
        # Ajouter l'embed au webhook r√©seau
        network_webhook.add_embed(embed_network)
        
        # Envoyer le webhook r√©seau
        network_response = network_webhook.execute()
        
        # V√©rification des r√©sultats
        hardware_success = hardware_response.status_code >= 200 and hardware_response.status_code < 300
        network_success = network_response.status_code >= 200 and network_response.status_code < 300
        
        if hardware_success and network_success:
            print(f"{Fore.GREEN}Rapports envoy√©s avec succ√®s sur Discord !")
        else:
            if not hardware_success:
                print(f"{Fore.RED}Erreur lors de l'envoi du rapport hardware: Code {hardware_response.status_code}")
            if not network_success:
                print(f"{Fore.RED}Erreur lors de l'envoi du rapport r√©seau: Code {network_response.status_code}")
        
    except Exception as e:
        print(f"{Fore.RED}Erreur lors de l'envoi des rapports sur Discord: {str(e)}")

def create_network_graph():
    """Cr√©e un graphique d'utilisation r√©seau."""
    # Collecter des donn√©es r√©seau pendant 10 secondes
    network_data = []
    start_time = time.time()
    
    print(f"{Fore.CYAN}Collecte des donn√©es r√©seau pour le graphique...")
    
    try:
        # Collecter des donn√©es pendant ~10 secondes
        for i in range(10):
            net_io = psutil.net_io_counters()
            network_data.append({
                "timestamp": time.time() - start_time,
                "bytes_sent": net_io.bytes_sent,
                "bytes_recv": net_io.bytes_recv
            })
            time.sleep(1)
        
        # Calculer les d√©bits
        for i in range(1, len(network_data)):
            sent_diff = network_data[i]["bytes_sent"] - network_data[i-1]["bytes_sent"]
            recv_diff = network_data[i]["bytes_recv"] - network_data[i-1]["bytes_recv"]
            time_diff = network_data[i]["timestamp"] - network_data[i-1]["timestamp"]
            
            network_data[i]["upload_speed"] = sent_diff / time_diff / 1024  # KB/s
            network_data[i]["download_speed"] = recv_diff / time_diff / 1024  # KB/s
        
        # Supprimer le premier point car il n'a pas de vitesse calcul√©e
        network_data = network_data[1:]
        
        # Cr√©er le graphique
        fig, ax = plt.subplots(figsize=(10, 6))
        
        times = [d["timestamp"] for d in network_data]
        upload_speeds = [d["upload_speed"] for d in network_data]
        download_speeds = [d["download_speed"] for d in network_data]
        
        ax.plot(times, upload_speeds, 'r-', label='Upload (KB/s)')
        ax.plot(times, download_speeds, 'b-', label='Download (KB/s)')
        
        ax.set_title('Utilisation R√©seau', fontsize=16, fontweight='bold')
        ax.set_xlabel('Temps (secondes)', fontsize=12)
        ax.set_ylabel('Vitesse (KB/s)', fontsize=12)
        ax.grid(True, alpha=0.3)
        ax.legend()
        
        # Cr√©er le r√©pertoire pour les rapports s'il n'existe pas
        reports_dir = "reports"
        if not os.path.exists(reports_dir):
            os.makedirs(reports_dir)
        
        # G√©n√©rer un nom de fichier avec la date et l'heure actuelles
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = os.path.join(reports_dir, f"network_usage_report_{timestamp}.png")
        
        # Sauvegarder le graphique
        plt.savefig(report_file, dpi=150)
        plt.close()
        
        return report_file
        
    except Exception as e:
        print(f"{Fore.RED}Erreur lors de la cr√©ation du graphique r√©seau: {str(e)}")
        return None

def send_network_report():
    """G√©n√®re et envoie un rapport r√©seau sur Discord avec plusieurs embeds th√©matiques."""
    try:
        print(f"{Fore.CYAN}G√©n√©ration du rapport r√©seau...")
        
        # Cr√©er le graphique r√©seau
        graph_file = create_network_graph()
        if not graph_file:
            print(f"{Fore.RED}Impossible de g√©n√©rer le graphique r√©seau.")
            return
        
        # R√©cup√©rer les informations r√©seau
        net_info = get_network_info()
        
        # R√©cup√©rer les informations syst√®me de base
        sys_info = get_system_info()
        
        # Cr√©er le webhook pour les rapports r√©seau
        webhook = DiscordWebhook(url=DISCORD_NETWORK_WEBHOOK_URL, 
                                username="MCP Network AI")
        
        # Ajouter l'image du graphique
        with open(graph_file, "rb") as f:
            webhook.add_file(file=f.read(), filename=os.path.basename(graph_file))
        
        # --------- EMBED 1: TITRE ET INFOS G√âN√âRALES ---------
        embed_title = DiscordEmbed(
            title=f"üåê Rapport R√©seau MCP AI Monitor - {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            description=f"Analyse d√©taill√©e de l'activit√© r√©seau sur **{sys_info['hostname']}**.",
            color=0x3498db  # Bleu
        )
        
        embed_title.set_timestamp()
        embed_title.set_footer(text=f"MCP AI Monitor | OS: {sys_info['os']}")
        
        # --------- EMBED 2: GRAPHIQUE R√âSEAU ---------
        embed_graph = DiscordEmbed(
            title=f"üìà Graphique d'Utilisation R√©seau",
            color=0x9b59b6  # Violet
        )
        
        embed_graph.set_image(url=f"attachment://{os.path.basename(graph_file)}")
        
        # Ajouter les d√©bits dans la description
        embed_graph.add_embed_field(
            name="üìä Activit√© Actuelle",
            value=f"**D√©bit montant:** {net_info['upload_speed']:.2f} KB/s\n"
                 f"**D√©bit descendant:** {net_info['download_speed']:.2f} KB/s\n"
                 f"**Total envoy√©:** {net_info['total_sent']:.2f} GB\n"
                 f"**Total re√ßu:** {net_info['total_recv']:.2f} GB"
        )
        
        embed_graph.set_footer(text="MCP AI Monitor | Graphique r√©seau")
        
        # --------- EMBED 3: INTERFACES R√âSEAU ---------
        embed_interfaces = DiscordEmbed(
            title=f"üñß Interfaces R√©seau",
            color=0x1abc9c  # Turquoise
        )
        
        # Tableau format√© des interfaces
        interfaces_info = ""
        for i, interface in enumerate(net_info['interfaces']):
            interfaces_info += f"**Interface {i+1}:** `{interface['name']}`\n"
            interfaces_info += f"   ‚îî‚îÄ IP: {interface['ip']}, Masque: {interface['netmask']}\n"
        
        embed_interfaces.description = interfaces_info if interfaces_info else "Aucune interface r√©seau active."
        embed_interfaces.set_footer(text="MCP AI Monitor | Interfaces r√©seau")
        
        # --------- EMBED 4: CONNEXIONS ACTIVES ---------
        if net_info['connections']:
            embed_connections = DiscordEmbed(
                title=f"üîå Connexions R√©seau Actives",
                color=0xf39c12  # Orange
            )
            
            # Tableau format√© des connexions
            connections_info = ""
            for i, conn in enumerate(net_info['connections']):
                try:
                    process_name = psutil.Process(conn['pid']).name() if conn['pid'] else "Inconnu"
                except:
                    process_name = "Inconnu"
                    
                connections_info += f"**{i+1}.** `{process_name}` (PID: {conn['pid']})\n"
                connections_info += f"   ‚îî‚îÄ {conn['local_addr']} ‚Üí {conn['remote_addr']}\n"
            
            embed_connections.description = connections_info
            embed_connections.set_footer(text="MCP AI Monitor | Connexions actives")
            
            # Ajouter cet embed uniquement s'il y a des connexions
            webhook.add_embed(embed_connections)
        
        # Ajouter les embeds principaux au webhook
        webhook.add_embed(embed_title)
        webhook.add_embed(embed_graph)
        webhook.add_embed(embed_interfaces)
        
        # Envoyer le webhook
        response = webhook.execute()
        
        if response.status_code >= 200 and response.status_code < 300:
            print(f"{Fore.GREEN}Rapport r√©seau envoy√© avec succ√®s sur Discord !")
        else:
            print(f"{Fore.RED}Erreur lors de l'envoi sur Discord: Code {response.status_code}")
        
    except Exception as e:
        print(f"{Fore.RED}Erreur lors de l'envoi du rapport r√©seau: {str(e)}")

def view_statistics(share_on_discord=False):
    """Affiche les statistiques collect√©es sous forme de graphiques."""
    data_file = os.path.join("data", "data.csv")
    
    if not os.path.exists(data_file):
        print(f"{Fore.RED}Erreur: Le fichier de donn√©es {data_file} n'existe pas.")
        print(f"{Fore.YELLOW}Ex√©cutez d'abord 'python mcp.py collect' pour collecter des donn√©es.")
        return
    
    print(f"{Fore.CYAN}Chargement des donn√©es et g√©n√©ration des graphiques...")
    
    try:
        # Utiliser un style moderne
        plt.style.use('ggplot')
        
        # D√©finir une palette de couleurs attrayante
        colors = ['#2C82C9', '#EF4836', '#27ae60', '#8E44AD', '#F89406']
        
        # Charger les donn√©es
        df = pd.read_csv(data_file)
        
        if len(df) < 2:
            print(f"{Fore.RED}Pas assez de donn√©es pour g√©n√©rer des graphiques.")
            return
        
        # Convertir les timestamps en dates
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        # Cr√©er un graphique avec deux sous-plots
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        # Graphique d'utilisation CPU
        ax1.plot(df['timestamp'], df['cpu_percent'], color=colors[0], linewidth=2, label='CPU %')
        ax1.set_title('Utilisation CPU au fil du temps', fontsize=16, fontweight='bold')
        ax1.set_ylabel('Utilisation CPU (%)', fontsize=12)
        ax1.set_xlabel('Heure', fontsize=12)
        # Ajouter une ligne horizontale pour la moyenne
        cpu_mean = df['cpu_percent'].mean()
        ax1.axhline(y=cpu_mean, color=colors[2], linestyle='--', alpha=0.7, 
                    label=f'Moyenne: {cpu_mean:.2f}%')
        # Ajouter des annotations pour les points maximums
        cpu_max_idx = df['cpu_percent'].idxmax()
        cpu_max = df['cpu_percent'].max()
        ax1.scatter(df['timestamp'][cpu_max_idx], cpu_max, color=colors[1], s=100, zorder=5)
        ax1.annotate(f'Max: {cpu_max:.2f}%', 
                    xy=(df['timestamp'][cpu_max_idx], cpu_max),
                    xytext=(10, 10), textcoords='offset points',
                    arrowprops=dict(arrowstyle='->', color=colors[1]))
        ax1.grid(True, alpha=0.3)
        ax1.legend(loc='upper right')
        
        # Graphique d'utilisation RAM
        ax2.plot(df['timestamp'], df['ram_percent'], color=colors[1], linewidth=2, label='RAM %')
        ax2.set_title('Utilisation RAM au fil du temps', fontsize=16, fontweight='bold')
        ax2.set_ylabel('Utilisation RAM (%)', fontsize=12)
        ax2.set_xlabel('Heure', fontsize=12)
        # Ajouter une ligne horizontale pour la moyenne
        ram_mean = df['ram_percent'].mean()
        ax2.axhline(y=ram_mean, color=colors[2], linestyle='--', alpha=0.7, 
                    label=f'Moyenne: {ram_mean:.2f}%')
        # Ajouter des annotations pour les points maximums
        ram_max_idx = df['ram_percent'].idxmax()
        ram_max = df['ram_percent'].max()
        ax2.scatter(df['timestamp'][ram_max_idx], ram_max, color=colors[0], s=100, zorder=5)
        ax2.annotate(f'Max: {ram_max:.2f}%', 
                    xy=(df['timestamp'][ram_max_idx], ram_max),
                    xytext=(10, 10), textcoords='offset points',
                    arrowprops=dict(arrowstyle='->', color=colors[0]))
        ax2.grid(True, alpha=0.3)
        ax2.legend(loc='upper right')
        
        # Ajouter un titre global
        fig.suptitle('MCP AI Monitor - Rapport d\'utilisation Syst√®me', 
                    fontsize=20, fontweight='bold', y=0.98)
        
        # Ajouter des informations sur le rapport
        plt.figtext(0.5, 0.01, f'Rapport g√©n√©r√© le {datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")}',
                   ha='center', fontsize=10, style='italic')
        
        # Ajuster le layout
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])
        
        # Cr√©er le r√©pertoire pour les rapports s'il n'existe pas
        reports_dir = "reports"
        if not os.path.exists(reports_dir):
            os.makedirs(reports_dir)
        
        # G√©n√©rer un nom de fichier avec la date et l'heure actuelles
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = os.path.join(reports_dir, f"system_usage_report_{timestamp}.png")
        
        # Sauvegarder le graphique
        plt.savefig(report_file, dpi=150)
        
        # Calculer les statistiques suppl√©mentaires
        stats = df[['cpu_percent', 'ram_percent']].describe()
        stats_data = {
            "cpu_percent": {
                "mean": stats['cpu_percent']['mean'],
                "std": stats['cpu_percent']['std'],
                "min": stats['cpu_percent']['min'],
                "max": stats['cpu_percent']['max']
            },
            "ram_percent": {
                "mean": stats['ram_percent']['mean'],
                "std": stats['ram_percent']['std'],
                "min": stats['ram_percent']['min'],
                "max": stats['ram_percent']['max']
            },
            "count": len(df)
        }
        
        # Afficher des statistiques suppl√©mentaires
        print(f"\n{Fore.GREEN}Statistiques d'utilisation syst√®me:")
        print(f"{Fore.YELLOW}{stats}")
        
        print(f"\n{Fore.GREEN}Graphique sauvegard√© dans: {Fore.CYAN}{report_file}")
        print(f"{Fore.YELLOW}Ouvrez ce fichier pour visualiser les tendances d'utilisation syst√®me.")
        
        # Partager sur Discord si demand√©
        if share_on_discord:
            send_discord_report(report_file, stats_data)
        
        # Afficher le graphique (uniquement si l'environnement le permet)
        plt.show()
        
        return report_file, stats_data
        
    except Exception as e:
        print(f"{Fore.RED}Erreur lors de la g√©n√©ration des statistiques: {str(e)}")
        return None, None

def parse_arguments():
    """Parse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(description="MCP_AI_Monitor - Surveillance syst√®me avec IA")
    
    parser.add_argument("action", choices=["collect", "train", "monitor", "all", "stats", "discord", "network"], 
                        help="Action √† ex√©cuter")
    
    parser.add_argument("--duration", type=int, default=60,
                        help="Dur√©e de la collecte de donn√©es en secondes (pour l'action 'all')")
    
    parser.add_argument("--report", action="store_true",
                        help="Envoyer un rapport √† Discord apr√®s l'ex√©cution (pour l'action 'all')")
    
    return parser.parse_args()

def main():
    """Fonction principale du programme."""
    print_banner()
    
    if not check_dependencies():
        return
    
    args = parse_arguments()
    
    if args.action == "collect":
        print(f"{Fore.CYAN}Lancement de la collecte de donn√©es...")
        run_module("collect_data")
        
    elif args.action == "train":
        print(f"{Fore.CYAN}Lancement de l'entra√Ænement du mod√®le...")
        run_module("train_model")
        
    elif args.action == "monitor":
        print(f"{Fore.CYAN}Lancement de la surveillance en temps r√©el...")
        run_module("monitor_ai")
        
    elif args.action == "stats":
        print(f"{Fore.CYAN}G√©n√©ration des statistiques et graphiques...")
        view_statistics(share_on_discord=False)
        
    elif args.action == "discord":
        print(f"{Fore.CYAN}G√©n√©ration et partage du rapport sur Discord...")
        view_statistics(share_on_discord=True)
        
    elif args.action == "network":
        print(f"{Fore.CYAN}Analyse du r√©seau et envoi du rapport sur Discord...")
        send_network_report()
        
    elif args.action == "all":
        print(f"{Fore.CYAN}Ex√©cution de la s√©quence compl√®te...")
        print(f"\n{Fore.YELLOW}1. Collecte des donn√©es (pendant {args.duration} secondes)...")
        # Ex√©cuter la collecte pendant une dur√©e limit√©e
        try:
            subprocess.run([sys.executable, "collect_data.py"], timeout=args.duration)
        except subprocess.TimeoutExpired:
            print(f"{Fore.GREEN}Collecte de donn√©es termin√©e apr√®s {args.duration} secondes.")
        
        print(f"\n{Fore.YELLOW}2. Entra√Ænement du mod√®le...")
        run_module("train_model")
        
        # Si l'option --report est activ√©e, g√©n√©rer et envoyer un rapport
        if args.report:
            print(f"\n{Fore.YELLOW}G√©n√©ration et envoi du rapport sur Discord...")
            report_file, stats_data = view_statistics(share_on_discord=False)
            if report_file and stats_data:
                send_discord_report(report_file, stats_data)
                
            print(f"\n{Fore.YELLOW}Analyse du r√©seau et envoi du rapport sur Discord...")
            send_network_report()
        
        print(f"\n{Fore.YELLOW}3. Lancement de la surveillance...")
        run_module("monitor_ai")

if __name__ == "__main__":
    main() 